{"name":"Konschti.GitHub.io","tagline":"Submission for Practical Machine Learning","body":"library(caret)  \r\nlibrary(randomForest)  \r\nlibrary(gbm)  \r\nlibrary(plyr)  \r\n\r\n# read the csv file for training from my working directory and delete columns with NAs\r\ndata_tr_original<- read.csv(\"pml-training.csv\", na.strings= c(\"NA\",\"\",\" \"))      \r\ndata_tr_NAs <- apply(data_tr_original, 2, function(x) {sum(is.na(x))})     \r\ndata_tr_clean <- data_tr_original[,which(data_tr_NAs == 0)]    \r\n\r\n# delete for the prediction useless identifier columns eg row number\r\ndata_tr_clean <- data_tr_clean[8:length(data_tr_clean)]   \r\n\r\n# divide the cleaned training data into separate training and testing set\r\ninTrain <- createDataPartition(y = data_tr_clean$classe, p = 0.7, list = FALSE)  \r\ntraining <- data_tr_clean[inTrain, ]  \r\ntesting <- data_tr_clean[-inTrain, ]  \r\n\r\n#compare boosting ('gbm'), and random forests (rf) to cross validate feature selection\r\n# with cross validation to find the best method \r\n# performing three runs of a five fold cross validation\r\nfitControl <- trainControl(method = \"repeatedcv\",number = 5,repeats = 3)\r\n# this one takes quite a while (at least on my laptop)\r\nmodelgbm <- train(classe ~ .,method='gbm',data = training,trControl=fitControl, verbose=FALSE) \r\nmodelrf<-train(classe ~ .,method='rf',data = training,trControl=fitControl)\r\n\r\n# evaluate the model using the remaining 30% of the data as testing set\r\npredictTestinggbm <- predict(modelgbm, testing)   \r\nconfusionMatrix(testing$classe, predictTestinggbm) #accuracy 0.9626  \r\n\r\npredictTestingrf <- predict(modelrf, testing) \r\nconfusionMatrix(testing$classe, predictTestingrf) #accuracy 0.992  \r\n\r\n#Choose the better performing model (random forest in this case) \r\n# on the testing set for use on the real prediction test set\r\n\r\n# load prediction test data and apply the same transformation as above for the training data\r\ndata_te_original <- read.csv(\"pml-testing.csv\", na.strings= c(\"NA\",\"\",\" \"))    \r\ndata_te_NAs <- apply(data_te_original, 2, function(x) {sum(is.na(x))})    \r\ndata_te_clean <- data_te_original[,which(data_te_NAs == 0)]    \r\ndata_te_clean <- data_te_clean[8:length(data_te_clean)]  \r\n\r\n# Prediction of the classes in the real prediction test set\r\npredictTest <- predict(modelrf, data_te_clean)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}